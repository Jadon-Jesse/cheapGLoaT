{"version":3,"sources":["web3.js","cheapGloat.js","containers/Layout.js","containers/HomeView.js","containers/GloatView.js","containers/AboutView.js","containers/SubmitView.js","containers/NewView.js","routes.js","App.js","reportWebVitals.js","index.js"],"names":["web3","process","REACT_APP_INFURA_LINK","window","ethereum","Web3","enable","error","console","log","ethContract","eth","Contract","CustomLayout","props","state","web3Connected","initPageData","a","w3Available","cheapGloat","getAccounts","accounts","length","setState","handleConnectWeb3Click","event","data","this","fixed","userLayout","userWeb3Comp","Label","as","Icon","name","onClick","Segment","inverted","textAlign","vertical","Menu","pointing","secondary","stackable","Container","Item","link","Button","to","pathname","position","children","React","Component","withRouter","HomeView","curMsg","value","message","accountsAvailable","accountList","cRoundStartTime","userCanCallNext","loading","accAvailable","usrNxt","methods","roundStartTime","call","roundStart","roundIntervalSeconds","roundIntSecs","locked","roundLocked","roundStartDt","Date","userNow","now","dtMili","Math","abs","nxtRoundStartInSec","contractIntMili","handleClickCallNextRound","callNextRoundPickWinner","checkIfNextRoundAndPickWinner","send","from","gas","submitButton","callNextButton","primary","size","icon","labelPosition","disabled","basic","color","style","padding","height","text","className","Header","content","fontSize","fontWeight","marginBottom","marginTop","GloatView","gloatCount","gloatList","roundNum","gloatIndex","numGloats","glts","i","theGloats","gloatI","push","listItems","map","row","index","subAddr","upVoteLabelObj","upvoteCount","downVoteLabelObj","downvoteCount","Content","maxWidth","minWidth","title","Description","Extra","paddingLeft","float","label","subUrlTruncated","str","start","end","substr","truncate","subUrl","href","target","subCaption","subId","minHeight","margin","Group","divided","AboutView","Divider","List","Message","SubmitView","linkUrl","linkCaption","submittedLinkUrl","submittedLinkCaption","linkUrlErr","linkCapErr","handleSubmit","valStrUrl","String","valStrCap","is_url","is_validCap","onSubmit","handleChange","e","valStr","test","handleChangeUrl","submitLink","Grid","Column","Card","centered","fluid","Form","Field","TextArea","onChange","placeholder","Input","type","NewView","newSubs","upvoteIsLoading","downvoteIsLoading","currentRoundNum","rnum","subs","loadingUs","loadingDs","submissions","subI","updateSubVotesAtId","sId","subList","handleClickUpvote","buttonClickId","submitUpvoteAsync","upvotesLoading","upvoteSubmissionById","utils","toWei","handleClickDownvote","submitDownvotevoteAsync","downvotesLoading","downvoteSubmissionById","BaseRouter","exact","path","component","App","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8720cc91.chunk.js","sourcesContent":["import Web3 from 'web3';\r\nconst INFURA_KEY = process.env.REACT_APP_INFURA_LINK;\r\nlet web3;\r\n\r\n// first check if we are on browser and userhas metamask\r\nif (typeof window !== 'undefined' && typeof window.ethereum !== 'undefined') {\r\n  // we are in browser\r\n  // and user has metamask\r\n  web3 = new Web3(window.ethereum);\r\n\r\n  try {\r\n    // Request account access if needed\r\n    window.ethereum.enable()\r\n    // Acccounts now exposed\r\n  } catch (error) {\r\n    // User denied account access...\r\n    console.log(\"Unable to enable web3\");\r\n  }\r\n\r\n}\r\nelse {\r\n  console.log(\"Please use metamask to enable web3\");\r\n  // todo: add custom provider for non-metamask users\r\n  // try create provider\r\n  // const provider = new Web3.providers.HttpProvider(INFURA_KEY);\r\n  web3 = null;\r\n  // web3 = new Web3(provider);\r\n}\r\n\r\n\r\nexport default web3;","import web3 from './web3';\r\n// const fs = require('fs-extra');\r\n// import fs from 'fs-extra';\r\nlet ethContract;\r\n\r\nif (web3 !== null) {\r\n    // console.log(web3.version);\r\n    // console.log(\"Got3\");\r\n    const address = '0x03A4BEF74AD092B908500f72182975065C86693e';\r\n    const contractObj = [\r\n        {\r\n            \"inputs\": [],\r\n            \"stateMutability\": \"nonpayable\",\r\n            \"type\": \"constructor\"\r\n        },\r\n        {\r\n            \"inputs\": [],\r\n            \"name\": \"checkIfNextRoundAndPickWinner\",\r\n            \"outputs\": [\r\n                {\r\n                    \"internalType\": \"bool\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"bool\"\r\n                }\r\n            ],\r\n            \"stateMutability\": \"nonpayable\",\r\n            \"type\": \"function\"\r\n        },\r\n        {\r\n            \"inputs\": [],\r\n            \"name\": \"currentRoundNum\",\r\n            \"outputs\": [\r\n                {\r\n                    \"internalType\": \"uint256\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"uint256\"\r\n                }\r\n            ],\r\n            \"stateMutability\": \"view\",\r\n            \"type\": \"function\"\r\n        },\r\n        {\r\n            \"inputs\": [\r\n                {\r\n                    \"internalType\": \"uint256\",\r\n                    \"name\": \"subId\",\r\n                    \"type\": \"uint256\"\r\n                }\r\n            ],\r\n            \"name\": \"downvoteSubmissionById\",\r\n            \"outputs\": [],\r\n            \"stateMutability\": \"payable\",\r\n            \"type\": \"function\"\r\n        },\r\n        {\r\n            \"inputs\": [],\r\n            \"name\": \"gloatIndex\",\r\n            \"outputs\": [\r\n                {\r\n                    \"internalType\": \"uint256\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"uint256\"\r\n                }\r\n            ],\r\n            \"stateMutability\": \"view\",\r\n            \"type\": \"function\"\r\n        },\r\n        {\r\n            \"inputs\": [],\r\n            \"name\": \"locked\",\r\n            \"outputs\": [\r\n                {\r\n                    \"internalType\": \"bool\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"bool\"\r\n                }\r\n            ],\r\n            \"stateMutability\": \"view\",\r\n            \"type\": \"function\"\r\n        },\r\n        {\r\n            \"inputs\": [],\r\n            \"name\": \"manager\",\r\n            \"outputs\": [\r\n                {\r\n                    \"internalType\": \"address\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"address\"\r\n                }\r\n            ],\r\n            \"stateMutability\": \"view\",\r\n            \"type\": \"function\"\r\n        },\r\n        {\r\n            \"inputs\": [],\r\n            \"name\": \"roundIntervalSeconds\",\r\n            \"outputs\": [\r\n                {\r\n                    \"internalType\": \"uint256\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"uint256\"\r\n                }\r\n            ],\r\n            \"stateMutability\": \"view\",\r\n            \"type\": \"function\"\r\n        },\r\n        {\r\n            \"inputs\": [],\r\n            \"name\": \"roundStartTime\",\r\n            \"outputs\": [\r\n                {\r\n                    \"internalType\": \"uint256\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"uint256\"\r\n                }\r\n            ],\r\n            \"stateMutability\": \"view\",\r\n            \"type\": \"function\"\r\n        },\r\n        {\r\n            \"inputs\": [\r\n                {\r\n                    \"internalType\": \"address\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"address\"\r\n                }\r\n            ],\r\n            \"name\": \"roundSubAddrs\",\r\n            \"outputs\": [\r\n                {\r\n                    \"internalType\": \"bool\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"bool\"\r\n                }\r\n            ],\r\n            \"stateMutability\": \"view\",\r\n            \"type\": \"function\"\r\n        },\r\n        {\r\n            \"inputs\": [\r\n                {\r\n                    \"internalType\": \"uint256\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"uint256\"\r\n                }\r\n            ],\r\n            \"name\": \"roundSubAddrsKeys\",\r\n            \"outputs\": [\r\n                {\r\n                    \"internalType\": \"address\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"address\"\r\n                }\r\n            ],\r\n            \"stateMutability\": \"view\",\r\n            \"type\": \"function\"\r\n        },\r\n        {\r\n            \"inputs\": [\r\n                {\r\n                    \"internalType\": \"string\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"string\"\r\n                }\r\n            ],\r\n            \"name\": \"roundSubLinks\",\r\n            \"outputs\": [\r\n                {\r\n                    \"internalType\": \"bool\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"bool\"\r\n                }\r\n            ],\r\n            \"stateMutability\": \"view\",\r\n            \"type\": \"function\"\r\n        },\r\n        {\r\n            \"inputs\": [\r\n                {\r\n                    \"internalType\": \"uint256\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"uint256\"\r\n                }\r\n            ],\r\n            \"name\": \"roundSubLinksKeys\",\r\n            \"outputs\": [\r\n                {\r\n                    \"internalType\": \"string\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"string\"\r\n                }\r\n            ],\r\n            \"stateMutability\": \"view\",\r\n            \"type\": \"function\"\r\n        },\r\n        {\r\n            \"inputs\": [],\r\n            \"name\": \"subCount\",\r\n            \"outputs\": [\r\n                {\r\n                    \"internalType\": \"uint256\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"uint256\"\r\n                }\r\n            ],\r\n            \"stateMutability\": \"view\",\r\n            \"type\": \"function\"\r\n        },\r\n        {\r\n            \"inputs\": [],\r\n            \"name\": \"subIndex\",\r\n            \"outputs\": [\r\n                {\r\n                    \"internalType\": \"uint256\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"uint256\"\r\n                }\r\n            ],\r\n            \"stateMutability\": \"view\",\r\n            \"type\": \"function\"\r\n        },\r\n        {\r\n            \"inputs\": [\r\n                {\r\n                    \"internalType\": \"uint256\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"uint256\"\r\n                }\r\n            ],\r\n            \"name\": \"submissions\",\r\n            \"outputs\": [\r\n                {\r\n                    \"internalType\": \"uint256\",\r\n                    \"name\": \"subId\",\r\n                    \"type\": \"uint256\"\r\n                },\r\n                {\r\n                    \"internalType\": \"address\",\r\n                    \"name\": \"subAddr\",\r\n                    \"type\": \"address\"\r\n                },\r\n                {\r\n                    \"internalType\": \"string\",\r\n                    \"name\": \"subUrl\",\r\n                    \"type\": \"string\"\r\n                },\r\n                {\r\n                    \"internalType\": \"string\",\r\n                    \"name\": \"subCaption\",\r\n                    \"type\": \"string\"\r\n                },\r\n                {\r\n                    \"internalType\": \"uint256\",\r\n                    \"name\": \"roundNumber\",\r\n                    \"type\": \"uint256\"\r\n                },\r\n                {\r\n                    \"internalType\": \"uint256\",\r\n                    \"name\": \"upvoteCount\",\r\n                    \"type\": \"uint256\"\r\n                },\r\n                {\r\n                    \"internalType\": \"uint256\",\r\n                    \"name\": \"downvoteCount\",\r\n                    \"type\": \"uint256\"\r\n                }\r\n            ],\r\n            \"stateMutability\": \"view\",\r\n            \"type\": \"function\"\r\n        },\r\n        {\r\n            \"inputs\": [\r\n                {\r\n                    \"internalType\": \"string\",\r\n                    \"name\": \"url\",\r\n                    \"type\": \"string\"\r\n                },\r\n                {\r\n                    \"internalType\": \"string\",\r\n                    \"name\": \"caption\",\r\n                    \"type\": \"string\"\r\n                }\r\n            ],\r\n            \"name\": \"submitLink\",\r\n            \"outputs\": [],\r\n            \"stateMutability\": \"nonpayable\",\r\n            \"type\": \"function\"\r\n        },\r\n        {\r\n            \"inputs\": [\r\n                {\r\n                    \"internalType\": \"string\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"string\"\r\n                }\r\n            ],\r\n            \"name\": \"theGloatLinks\",\r\n            \"outputs\": [\r\n                {\r\n                    \"internalType\": \"bool\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"bool\"\r\n                }\r\n            ],\r\n            \"stateMutability\": \"view\",\r\n            \"type\": \"function\"\r\n        },\r\n        {\r\n            \"inputs\": [\r\n                {\r\n                    \"internalType\": \"uint256\",\r\n                    \"name\": \"\",\r\n                    \"type\": \"uint256\"\r\n                }\r\n            ],\r\n            \"name\": \"theGloats\",\r\n            \"outputs\": [\r\n                {\r\n                    \"internalType\": \"address\",\r\n                    \"name\": \"subAddr\",\r\n                    \"type\": \"address\"\r\n                },\r\n                {\r\n                    \"internalType\": \"string\",\r\n                    \"name\": \"subUrl\",\r\n                    \"type\": \"string\"\r\n                },\r\n                {\r\n                    \"internalType\": \"string\",\r\n                    \"name\": \"subCaption\",\r\n                    \"type\": \"string\"\r\n                },\r\n                {\r\n                    \"internalType\": \"uint256\",\r\n                    \"name\": \"roundNumber\",\r\n                    \"type\": \"uint256\"\r\n                },\r\n                {\r\n                    \"internalType\": \"uint256\",\r\n                    \"name\": \"upvoteCount\",\r\n                    \"type\": \"uint256\"\r\n                },\r\n                {\r\n                    \"internalType\": \"uint256\",\r\n                    \"name\": \"downvoteCount\",\r\n                    \"type\": \"uint256\"\r\n                }\r\n            ],\r\n            \"stateMutability\": \"view\",\r\n            \"type\": \"function\"\r\n        },\r\n        {\r\n            \"inputs\": [\r\n                {\r\n                    \"internalType\": \"uint256\",\r\n                    \"name\": \"subId\",\r\n                    \"type\": \"uint256\"\r\n                }\r\n            ],\r\n            \"name\": \"upvoteSubmissionById\",\r\n            \"outputs\": [],\r\n            \"stateMutability\": \"payable\",\r\n            \"type\": \"function\"\r\n        }\r\n    ];\r\n\r\n    ethContract = new web3.eth.Contract(contractObj, address);\r\n}\r\nelse {\r\n    // console.log(\"No 3\");\r\n    ethContract = null\r\n}\r\n\r\n\r\n\r\n\r\nexport default ethContract;","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport web3 from '../web3';\r\nimport cheapGloat from '../cheapGloat';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Icon,\r\n  Menu,\r\n  Segment,\r\n  Label,\r\n} from 'semantic-ui-react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\n\r\nclass CustomLayout extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  state = {\r\n    web3Connected: false,\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    // const { pathname } = this.props.location;\r\n    // console.log(pathname);\r\n    // this.setCurrentMenuItemActive();\r\n\r\n    this.initPageData();\r\n\r\n  }\r\n\r\n  initPageData = async () => {\r\n\r\n    let accounts;\r\n    let w3Available = false;\r\n\r\n    if (web3 !== null && cheapGloat !== null) {\r\n      // console.log(web3.version);\r\n      // console.log(\"Got3\");\r\n      accounts = await web3.eth.getAccounts();\r\n      // console.log(accounts);\r\n      if (accounts.length > 0) {\r\n        w3Available = true;\r\n      }\r\n      else {\r\n        w3Available = false;\r\n\r\n      }\r\n\r\n    }\r\n    else {\r\n      w3Available = false;\r\n\r\n    }\r\n    this.setState({ web3Connected: w3Available });\r\n\r\n\r\n\r\n\r\n  };\r\n\r\n\r\n\r\n  handleConnectWeb3Click = (event, data) => {\r\n    // console.log(\"web3 connect clicked\");\r\n    // console.log(event);\r\n    // console.log(data);\r\n    try {\r\n      // Request account access if needed\r\n      window.ethereum.enable();\r\n      // Acccounts now exposed\r\n      this.setState({ web3Connected: true });\r\n    } catch (error) {\r\n      // User denied account access...\r\n      console.log(\"Unable to enable web3\");\r\n      this.setState({ web3Connected: false });\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    // const { children } = this.props\r\n    const fixed = this.state.fixed;\r\n    let userLayout = null;\r\n\r\n    var authMenuItems = null;\r\n\r\n    let userWeb3Comp = null;\r\n\r\n    if (this.state.web3Connected === true) {\r\n      userWeb3Comp = (\r\n        <Label as='a'>\r\n          <Icon name='circle' /> Connected\r\n        </Label>\r\n      );\r\n    }\r\n    else {\r\n      userWeb3Comp = (\r\n        <Label as='a' onClick={this.handleConnectWeb3Click}>\r\n          <Icon name='circle outline' /> Connect\r\n        </Label>\r\n      );\r\n    }\r\n\r\n    userLayout = (\r\n      <div>\r\n        <Segment\r\n          inverted\r\n          textAlign='center'\r\n          vertical\r\n        >\r\n          <Menu\r\n            inverted\r\n            pointing\r\n            secondary\r\n            stackable\r\n          >\r\n            <Container>\r\n              <Menu.Item name=\"GloaT\" link>\r\n                <Button inverted>\r\n                  <Link\r\n                    to={{ pathname: \"/gloat\" }}\r\n                  >\r\n                    GLoaT\r\n                  </Link>\r\n                </Button>\r\n              </Menu.Item>\r\n\r\n              <Menu.Item name=\"Home\" link >\r\n                <Link to={{ pathname: \"/\" }} >\r\n                  Home\r\n                </Link>\r\n              </Menu.Item>\r\n\r\n              <Menu.Item name=\"New\" link>\r\n                <Link to={{ pathname: \"/new\" }} >\r\n                  New\r\n                </Link>\r\n              </Menu.Item>\r\n\r\n              <Menu.Item name=\"New\" link>\r\n                <Link to={{ pathname: \"/submit\" }} >\r\n                  Submit\r\n                </Link>\r\n              </Menu.Item>\r\n\r\n              <Menu.Item name=\"About\" link>\r\n                <Link to={{ pathname: \"/about\" }} >\r\n                  About\r\n                </Link>\r\n              </Menu.Item>\r\n\r\n              <Menu.Item position='right'>\r\n                {userWeb3Comp}\r\n\r\n              </Menu.Item>\r\n            </Container>\r\n          </Menu>\r\n        </Segment>\r\n        {this.props.children}\r\n      </div>\r\n\r\n\r\n\r\n    );\r\n\r\n\r\n    return (\r\n      <div>\r\n        {userLayout}\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default withRouter(CustomLayout);\r\n\r\n","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport web3 from '../web3';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Header,\r\n  Icon,\r\n  Segment,\r\n} from 'semantic-ui-react';\r\nimport cheapGloat from '../cheapGloat';\r\nimport { Link, withRouter } from 'react-router-dom';\r\n\r\nclass HomeView extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  state = {\r\n    curMsg: \"\",\r\n    value: \"\",\r\n    message: \"\",\r\n    accountsAvailable: false,\r\n    accountList: [],\r\n    cRoundStartTime: null,\r\n    userCanCallNext: false,\r\n    loading: false,\r\n  };\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    this.initPageData();\r\n\r\n  }\r\n\r\n  initPageData = async () => {\r\n\r\n    let accounts = [];\r\n    let accAvailable = false;\r\n    let usrNxt = false;\r\n\r\n\r\n    if (web3 !== null && cheapGloat !== null) {\r\n      // console.log(web3.version);\r\n      // console.log(\"Got3\");\r\n      accounts = await web3.eth.getAccounts();\r\n      // console.log(accounts);\r\n      if (accounts.length > 0) {\r\n        accAvailable = true;\r\n\r\n        // check if user can call next\r\n        // const message = await cheapGloat.methods.chairperson().call();\r\n        const roundStart = await cheapGloat.methods.roundStartTime().call();\r\n        const roundIntSecs = await cheapGloat.methods.roundIntervalSeconds().call();\r\n        const roundLocked = await cheapGloat.methods.locked().call();\r\n        var roundStartDt = new Date(roundStart * 1000);\r\n        // console.log(\"Round Start:\", roundStart, \"as dt\", roundStartDt);\r\n\r\n        const userNow = new Date(Date.now());\r\n        // console.log(\"User Now\", userNow);\r\n        // get diff between round start and users now in milisecs\r\n        const dtMili = Math.abs(userNow - roundStartDt);\r\n        // console.log(dtMili);\r\n\r\n        // const milsRoundInt = 21600000;\r\n        const milsRoundInt = 600000;\r\n        // convert contract round interval to miliseconds\r\n        const contractIntMili = roundIntSecs * 1000;\r\n\r\n        // calc  time until user can call next\r\n        // RoundInterval - dtMili\r\n        const nxtRoundStartInSec = (contractIntMili - dtMili) / 1000;\r\n        console.log(\"Next round available in: \", nxtRoundStartInSec, \" seconds\");\r\n\r\n\r\n\r\n\r\n        if (dtMili > contractIntMili && roundLocked === false) {\r\n          // enable pick winner for the current user\r\n          usrNxt = true;\r\n        }\r\n        else {\r\n          usrNxt = false;\r\n\r\n        }\r\n      }\r\n      else {\r\n        accAvailable = false;\r\n        usrNxt = false;\r\n\r\n      }\r\n    }\r\n    else {\r\n      accAvailable = false;\r\n      usrNxt = false;\r\n\r\n    }\r\n    this.setState({\r\n      accountsAvailable: accAvailable,\r\n      userCanCallNext: usrNxt,\r\n      accountList: accounts\r\n    });\r\n\r\n  };\r\n\r\n  handleClickCallNextRound = () => {\r\n    // console.log(\"User called next\");\r\n    // now try call next round async\r\n    this.callNextRoundPickWinner();\r\n\r\n  }\r\n\r\n  callNextRoundPickWinner = async () => {\r\n    this.setState({ loading: true });\r\n    try {\r\n      const result = await cheapGloat.methods.checkIfNextRoundAndPickWinner().send({\r\n        from: this.state.accountList[0],\r\n        gas: \"5000000\",\r\n      });\r\n      this.setState({\r\n        loading: false,\r\n        userCanCallNext: false\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error, unable to pick winner. Err:\", error);\r\n      this.setState({ loading: false });\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    let userLayout;\r\n    let submitButton = null;\r\n    let callNextButton = null;\r\n\r\n    if (this.state.accountsAvailable === true) {\r\n      submitButton = (\r\n        <Link to={{ pathname: \"/submit\" }}>\r\n          <Button primary size='huge' icon labelPosition='right'>\r\n            Submit\r\n            <Icon name='right arrow' />\r\n          </Button>\r\n        </Link>\r\n      );\r\n    }\r\n    else {\r\n      submitButton = (\r\n        <div>\r\n          <Button primary size='huge' disabled icon labelPosition='right'>\r\n            Submit\r\n              <Icon name='right arrow' />\r\n          </Button>\r\n          <p>(Unable to connect to the cheapETH network - Refresh the page OR try installing MetaMask to participate)</p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (this.state.userCanCallNext === true) {\r\n      callNextButton = (\r\n        <Button loading={this.state.loading} basic color='orange' size='huge' onClick={this.handleClickCallNextRound} icon labelPosition='right'>\r\n          Next Round\r\n          <Icon name='recycle' />\r\n        </Button>\r\n      );\r\n    }\r\n\r\n    userLayout = (\r\n      <Segment\r\n        inverted\r\n        textAlign='center'\r\n        style={{ padding: '1em 0em', height: '100vh' }}\r\n        vertical\r\n      >\r\n        <Container text>\r\n          <div className=\"logoText\">\r\n            <p>cheap</p>GLOAT\r\n\r\n              </div>\r\n          <Header\r\n            as='h1'\r\n            content='Submit your greatest link'\r\n            inverted\r\n            style={{\r\n              fontSize: '4em',\r\n              fontWeight: 'normal',\r\n              marginBottom: '1em',\r\n              marginTop: '1em',\r\n            }}\r\n          />\r\n          <div>\r\n            <div style={{ marginBottom: '1em' }}>\r\n              {submitButton}\r\n            </div>\r\n\r\n            <div style={{ marginBottom: '1em' }}>\r\n              {callNextButton}\r\n            </div>\r\n          </div>\r\n          <Header\r\n            as='h2'\r\n            inverted\r\n            style={{\r\n              fontSize: '1.7em',\r\n              fontWeight: 'normal',\r\n              marginTop: '1.5em',\r\n            }}\r\n          >\r\n            <p>Or browse <Link to={{ pathname: \"/new\" }}>new submissions</Link></p>\r\n\r\n          </Header>\r\n          {this.state.curMsg}\r\n        </Container>\r\n      </Segment>\r\n    );\r\n\r\n\r\n    return (\r\n      <div>\r\n        {userLayout}\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default withRouter(HomeView);\r\n\r\n","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Header,\r\n  Segment,\r\n  Item,\r\n  Label,\r\n} from 'semantic-ui-react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport cheapGloat from '../cheapGloat';\r\nimport web3 from '../web3';\r\n\r\nconst ZERO_ADDR = \"0x0000000000000000000000000000000000000000\";\r\n\r\n\r\nclass GloatView extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  state = {\r\n    curMsg: \"\",\r\n    value: \"\",\r\n    message: \"\",\r\n    gloatCount: 0,\r\n    gloatList: [],\r\n    loading: false,\r\n    roundNum: null,\r\n    accountsAvailable: false,\r\n    accountList: []\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    this.initPageData();\r\n\r\n  }\r\n\r\n  initPageData = async () => {\r\n\r\n    let accounts;\r\n    let accAvailable = false;\r\n    if (web3 !== null && cheapGloat !== null) {\r\n      // console.log(web3.version);\r\n      // console.log(\"Got3\");\r\n      accounts = await web3.eth.getAccounts();\r\n      // console.log(accounts);\r\n      if (accounts.length > 0) {\r\n        accAvailable = true;\r\n      }\r\n      else {\r\n        accAvailable = false;\r\n      }\r\n    }\r\n    else {\r\n      accAvailable = false;\r\n    }\r\n\r\n    if (accAvailable === true) {\r\n      // user has web3 available\r\n      // fetch list of current submissions\r\n      // const rnum = await cheapGloat.methods.currentRoundNum().call();\r\n      // console.log(rnum);\r\n\r\n      this.setState({\r\n        loading: true,\r\n        accountsAvailable: accAvailable,\r\n        accountList: accounts,\r\n      });\r\n\r\n      // first get the number of gloats\r\n      const numGloats = await cheapGloat.methods.gloatIndex().call();\r\n\r\n      // use roundNum for now\r\n      // const numGloats = await cheapGloat.methods.currentRoundNum().call();\r\n      // TODO: add paganation logic\r\n\r\n      var glts = [];\r\n      if (numGloats > 0) {\r\n        for (var i = 0; i < numGloats; i++) {\r\n          const gloatI = await cheapGloat.methods.theGloats(i).call();\r\n          glts.push(gloatI);\r\n\r\n        }\r\n      }\r\n\r\n      // var subs = [];\r\n\r\n      // for (var i = 0; i < 20; i++) {\r\n      //   const subI = await cheapGloat.methods.submissions(i).call();\r\n      //   subs.push(subI);\r\n\r\n      // }\r\n\r\n\r\n      // console.log(message);\r\n      this.setState({\r\n        gloatList: glts,\r\n        loading: false\r\n      });\r\n\r\n\r\n    }\r\n    else {\r\n      // user does not have web3\r\n      // let them know\r\n      this.setState({\r\n        loading: false,\r\n        accountsAvailable: accAvailable,\r\n      });\r\n    }\r\n\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    let userLayout;\r\n\r\n\r\n    let listItems = this.state.gloatList.map((row, index) => {\r\n      const truncate = (str, start, end) => {\r\n        // only if str len is > 42\r\n        if (str.length > start) {\r\n\r\n          let seperator = '...';\r\n          return str.substr(0, start) + seperator + str.substr(str.length - end);\r\n        }\r\n        else {\r\n          return str;\r\n        }\r\n      }\r\n\r\n      // const position = (index + 1);\r\n\r\n\r\n      if (row.subAddr == ZERO_ADDR) {\r\n        // use subAddr to tell if this post has been actually submitted\r\n\r\n        const upVoteLabelObj = { basic: true, content: row.upvoteCount };\r\n        const downVoteLabelObj = { basic: true, pointing: 'right', content: row.downvoteCount };\r\n        return (\r\n          <Item key={index}>\r\n\r\n            <Item.Content style={{ maxWidth: \"40px\", minWidth: \"40px\" }} >\r\n              <Item.Header>{index}.</Item.Header>\r\n            </Item.Content>\r\n\r\n            <Item.Content >\r\n\r\n              <Item.Header >\r\n                <div className=\"container\" >\r\n                  <span title=\"\">\r\n                  </span>\r\n                </div>\r\n\r\n              </Item.Header>\r\n              <Item.Description> <Label size=\"mini\">by {row.subAddr}</Label></Item.Description>\r\n              <Item.Extra>\r\n\r\n\r\n              </Item.Extra>\r\n            </Item.Content>\r\n\r\n            <Item.Content style={{ paddingLeft: \"10px\" }}>\r\n              <div style={{ float: \"right\" }}>\r\n                <Button\r\n                  disabled\r\n                  icon='arrow up'\r\n                  color=\"blue\"\r\n                  label={upVoteLabelObj}\r\n                  labelPosition='right'\r\n                />\r\n                <Button\r\n                  disabled\r\n                  icon='arrow down'\r\n                  color=\"black\"\r\n                  label={downVoteLabelObj}\r\n                  labelPosition='left'\r\n                />\r\n              </div>\r\n            </Item.Content>\r\n\r\n          </Item>\r\n        );\r\n\r\n      }\r\n      else {\r\n\r\n        const subUrlTruncated = truncate(row.subUrl, 42, 3);\r\n        // console.log(row);\r\n\r\n\r\n        // create the upvote/downvote label objects for this row\r\n        const upVoteLabelObj = { basic: true, content: row.upvoteCount };\r\n        const downVoteLabelObj = { basic: true, pointing: 'right', content: row.downvoteCount };\r\n        return (\r\n          <Item key={index}>\r\n\r\n            <Item.Content style={{ maxWidth: \"40px\", minWidth: \"40px\" }} >\r\n              <Item.Header>{index}.</Item.Header>\r\n            </Item.Content>\r\n\r\n            <Item.Content >\r\n\r\n              <Item.Header href={row.subUrl} target='_blank'>\r\n                <div className=\"container\" >\r\n                  <span title={row.subUrl}>\r\n                    {subUrlTruncated}\r\n                  </span>\r\n                </div>\r\n\r\n              </Item.Header>\r\n              <Item.Description>{row.subCaption} <Label color=\"blue\" size=\"mini\">by {row.subAddr}</Label></Item.Description>\r\n              <Item.Extra>\r\n\r\n\r\n              </Item.Extra>\r\n            </Item.Content>\r\n\r\n            <Item.Content style={{ paddingLeft: \"10px\" }}>\r\n              <div style={{ float: \"right\" }}>\r\n                <Button\r\n                  disabled\r\n                  icon='arrow up'\r\n                  color=\"blue\"\r\n                  label={upVoteLabelObj}\r\n                  labelPosition='right'\r\n                  value={row.subId}\r\n                />\r\n                <Button\r\n                  disabled\r\n                  icon='arrow down'\r\n                  color=\"black\"\r\n                  label={downVoteLabelObj}\r\n                  labelPosition='left'\r\n                  value={row.subId}\r\n                />\r\n              </div>\r\n            </Item.Content>\r\n\r\n          </Item>\r\n        );\r\n      }\r\n\r\n    });\r\n\r\n\r\n    userLayout = (\r\n      <div  >\r\n        <Segment\r\n          inverted\r\n          textAlign='center'\r\n          style={{ minHeight: 100, padding: '1em 0em' }}\r\n          vertical\r\n          loading={this.state.loading}\r\n        >\r\n          <Container text >\r\n            <Header\r\n              as='h1'\r\n              inverted\r\n              style={{\r\n                fontWeight: 'normal',\r\n                marginBottom: '1em',\r\n                marginTop: '1em',\r\n              }}\r\n            >\r\n              Greatest Links of all Time\r\n            </Header>\r\n          </Container>\r\n\r\n        </Segment>\r\n\r\n        <Segment\r\n          style={{ margin: '3em', padding: '1em 0em' }}\r\n          vertical\r\n          size=\"small\"\r\n        >\r\n          <Item.Group divided>\r\n            {listItems}\r\n          </Item.Group>\r\n        </Segment>\r\n      </div>\r\n    );\r\n\r\n\r\n    return (\r\n      <div>\r\n        {userLayout}\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default withRouter(GloatView);\r\n\r\n","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\nimport { createMedia } from '@artsy/fresnel';\r\nimport PropTypes from 'prop-types';\r\n// import web3 from './web3';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Divider,\r\n  Grid,\r\n  Header,\r\n  Icon,\r\n  Image,\r\n  List,\r\n  Menu,\r\n  Segment,\r\n  Message,\r\n  Visibility,\r\n  Item\r\n} from 'semantic-ui-react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\n\r\nclass AboutView extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    let userLayout;\r\n    const upVoteLabelObj = { basic: true, content: 1 };\r\n    const downVoteLabelObj = { basic: true, pointing: 'right', content: 1 };\r\n    userLayout = (\r\n      <div>\r\n        <Segment\r\n          inverted\r\n          textAlign='center'\r\n          style={{ minHeight: 100, padding: '1em 0em' }}\r\n          vertical\r\n        >\r\n          <Container text>\r\n            <Header\r\n              as='h1'\r\n              inverted\r\n              style={{\r\n                fontWeight: 'normal',\r\n                marginBottom: '1em',\r\n                marginTop: '1em',\r\n              }}\r\n            >\r\n              <Header.Content>\r\n                About cheapGLoaT\r\n              </Header.Content>\r\n            </Header>\r\n          </Container>\r\n\r\n        </Segment>\r\n        <Segment textAlign='left'>\r\n          <Container text>\r\n            <b>cheapGLoaT</b>\r\n            <Divider />\r\n            <p>\r\n              \"Greatest Links of all Time\" is a decentralized link aggregation system built on the cheapETH network.\r\n            </p>\r\n            <p>\r\n              The idea is to provide users with a periodically updating, self moderating platform - to aggregate and reward great links.\r\n            </p>\r\n          </Container>\r\n\r\n\r\n        </Segment>\r\n        <Segment textAlign='left'>\r\n          <Container text>\r\n            <b>How it works</b>\r\n            <Divider />\r\n            <List as=\"ul\">\r\n              <List.Item as=\"li\">\r\n                Each <b>round</b> there are 69 <b>submission</b> spots available\r\n                <Message size='mini'>\r\n                  A<b> round  </b> lasts approximately <b>24 hours</b> and is essentially the heartbeat of the cheapGLoaT system\r\n                  <br />\r\n                  <br />\r\n                  <b>Submissions</b> are free. You only pay for the gas\r\n                </Message>\r\n              </List.Item>\r\n              <List.Item as=\"li\">\r\n                Each round a <b>unique user </b>is allowed to submit a <b>unique link </b>(if there are submission spots available)\r\n                <Message size='mini'>\r\n                  A<b> unique user </b>is a user who has not yet made a submission in the current round\r\n                  <br />\r\n                  <br />\r\n                  A<b> unique link </b>is a link which has not yet been submitted in the current round and also has\r\n                    not already been entered into the Greatest Links of all Time\r\n\r\n                </Message>\r\n              </List.Item>\r\n              <List.Item as=\"li\">\r\n                Each round<b> general users </b>are allowed to view and interact with the current round submissions\r\n                by visiting the \"New\" tab\r\n                <Message size='mini'>\r\n                  <b> general users </b>are the set of users who have successfully connected to the cheapGLoaT front-end via MetaMask\r\n\r\n                </Message>\r\n              </List.Item>\r\n              <List.Item as=\"li\">\r\n                Each round a general user is allowed to <b>up-vote </b>multiple submissions but is not allowed to <b>up-vote </b>the same submission more than once\r\n                <Message size=\"mini\">\r\n                  <Button\r\n                    icon='arrow up'\r\n                    color=\"blue\"\r\n                    label={upVoteLabelObj}\r\n                    labelPosition='right'\r\n                  />\r\n                  1 <b>up-vote </b>costs a minimum of 0.5 cTH\r\n\r\n                </Message>\r\n\r\n\r\n              </List.Item>\r\n              <List.Item as=\"li\">\r\n                Each round a general user is allowed to <b>down-vote </b>multiple submissions but is not allowed to <b>down-vote </b>the same submission more than once\r\n                <Message size=\"mini\">\r\n\r\n                  <Button\r\n                    icon='arrow down'\r\n                    color=\"black\"\r\n                    label={downVoteLabelObj}\r\n                    labelPosition='left'\r\n                  />\r\n                  1 <b>down-vote </b>costs a minimum of 0.5 cTH\r\n                </Message>\r\n\r\n              </List.Item>\r\n              <List.Item as=\"li\">\r\n                Each round a<b> prize pool </b>is formed so that the winnings can be distributed appropriately\r\n                <Message size='mini'>\r\n                  The<b> prize pool </b>is the value of the of the total number of up-votes, across all submissions, for that round\r\n                  <br />\r\n                  <br />\r\n                  Down-votes do not contribute to the value of the<b> prize pool </b>\r\n                  <br />\r\n                  <br />\r\n                  For example, if there were 3 submissions in the current round; <i>Submission A</i> with 3 up-votes, <i>Submission B</i> with 2 up-votes\r\n                  and <i>Submission C</i> with 1 up-vote and 5 down-votes.\r\n                  Then, that rounds <b>prize pool</b> will be = (0.5 cTH * (3+2+1)) = 3 cTH\r\n                  <br />\r\n                  <br />\r\n                  The<b> prize pool </b>for a round is distributed as follows; 70% goes to the winner, 20% to the lucky caller, 10% to the manager\r\n                </Message>\r\n              </List.Item>\r\n              <List.Item as=\"li\">\r\n                The<b> winner </b>of each round will be the submission with the highest <b>score</b> (or earliest submission)\r\n                <Message size='mini'>\r\n                  The<b> winner </b>will receive 70% of the total prize pool for that that round\r\n                  <br />\r\n                  <br />\r\n                  The<b> winner's </b>submission will be entered into the Greatest Links of all Time\r\n                  <br />\r\n                  <br />\r\n                  The<b> score </b>for a submission is calculated by taking the difference between it's number of up-votes and it's number of down-votes\r\n                </Message>\r\n              </List.Item>\r\n              <List.Item as=\"li\">\r\n                At the end of each round one lucky general user will be allowed to call the <b>checkIfNextRoundAndPickWinner</b> function\r\n                <Message size='mini'>\r\n                  <b>checkIfNextRoundAndPickWinner </b>is a function defined in the cheapGLoaT contract\r\n                  <br />\r\n                  <br />\r\n                    The <Button size=\"mini\" basic color='orange' icon labelPosition='right'>Next Round<Icon name='recycle' /></Button>\r\n                    button will become visible on the \"Home\" tab once the <b>checkIfNextRoundAndPickWinner </b> function is ready to be called\r\n                  <br />\r\n                  <br />\r\n                  The user who chooses to execute the<b> checkIfNextRoundAndPickWinner </b>function will be the one who is responsible for\r\n                  picking the winner, settling payments and resetting the cheapGLoaT contract for the next round\r\n                  <br />\r\n                  <br />\r\n                  Since the <b>checkIfNextRoundAndPickWinner </b>function carries out most of the contract logic, the gas price to execute can get a bit high (min 5000000 wei)\r\n                  <br />\r\n                  <br />\r\n                  So if a user successfully executes the <b>checkIfNextRoundAndPickWinner </b>function, they will receive 20% of the total prize pool for that round\r\n\r\n                </Message>\r\n\r\n              </List.Item>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </List>\r\n\r\n\r\n          </Container>\r\n\r\n\r\n        </Segment>\r\n\r\n        <Segment textAlign='left'>\r\n          <Container text>\r\n            <b>Useful Links</b>\r\n            <Divider />\r\n            <List as=\"ul\">\r\n              <List.Item as=\"li\">\r\n                <Item.Header href=\"https://cheapeth.org/\" target='_blank'>cheapETH project\r\n                </Item.Header>\r\n              </List.Item>\r\n              <List.Item as=\"li\">\r\n                <Item.Header href=\"https://metamask.io/download.html\" target='_blank'>how to setup MetaMask\r\n                </Item.Header>\r\n              </List.Item>\r\n              <List.Item as=\"li\">\r\n                <Item.Header href=\"https://cheapeth.org/metamask.html\" target='_blank'>how to setup cheapETH on MetaMask\r\n                </Item.Header>\r\n              </List.Item>\r\n              <List.Item as=\"li\">\r\n                <Item.Header href=\"https://github.com/Jadon-Jesse/cheapGLoaT-contracts\" target='_blank'>cheapGLoaT contract source code\r\n                </Item.Header>\r\n              </List.Item>\r\n              <List.Item as=\"li\">\r\n                <Item.Header href=\"https://github.com/Jadon-Jesse/cheapGLoaT\" target='_blank'>cheapGLoaT front-end source code\r\n                </Item.Header>\r\n              </List.Item>\r\n            </List>\r\n          </Container>\r\n\r\n\r\n        </Segment>\r\n\r\n        <Segment textAlign='left'>\r\n          <Container text>\r\n            <b>Support</b>\r\n            <Divider />\r\n            <List as=\"ul\">\r\n              <List.Item>\r\n                <List.Icon name=\"arrow down\" /> By down-voting shitposts\r\n              </List.Item>\r\n              OR\r\n              <br />\r\n              <List.Item>\r\n                <List.Icon name=\"ethereum\" /> 0x6D126F7882EfE24587039bADE81843178e8DdC86\r\n              </List.Item>\r\n              <List.Item>\r\n                <List.Icon name=\"btc\" /> 3CYmGwB9oBnN7xMS9LpJv45DMibWjrz6bN\r\n              </List.Item>\r\n\r\n            </List>\r\n          </Container>\r\n\r\n\r\n        </Segment>\r\n      </div>\r\n\r\n    );\r\n\r\n\r\n    return (\r\n      <div>\r\n        {userLayout}\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default withRouter(AboutView);\r\n\r\n","import React, { Component } from 'react';\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Segment,\r\n  Form,\r\n  Card,\r\n  TextArea\r\n} from 'semantic-ui-react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport web3 from '../web3';\r\n\r\nimport cheapGloat from '../cheapGloat';\r\n\r\nclass SubmitView extends Component {\r\n\r\n  state = {\r\n    linkUrl: '',\r\n    linkCaption: '',\r\n    submittedLinkUrl: '',\r\n    submittedLinkCaption: '',\r\n    message: '',\r\n    loading: false,\r\n    linkUrlErr: false,\r\n    linkCapErr: false\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n\r\n  handleSubmit = () => {\r\n    // this.setState({ email: '', name: '' });\r\n    try {\r\n      // first check if the submitted vals are valid\r\n      var valStrUrl = String(this.state.linkUrl);\r\n      var valStrCap = String(this.state.linkCaption);\r\n      if (this.is_url(valStrUrl) === true && this.is_validCap(valStrCap) === true) {\r\n        this.setState({\r\n          submittedLinkUrl: valStrUrl,\r\n          submittedLinkCaption: valStrCap,\r\n          linkUrlErr: false,\r\n          linkCapErr: false\r\n        });\r\n        // now call the submitLink function\r\n        this.onSubmit();\r\n\r\n      }\r\n      else {\r\n        // not valid submission - disp error\r\n        this.setState({\r\n          linkUrlErr: true,\r\n          linkCapErr: true\r\n        });\r\n      }\r\n    } catch (error) {\r\n      this.setState({\r\n        linkUrlErr: true,\r\n        linkCapErr: true\r\n      });\r\n\r\n    }\r\n\r\n  }\r\n\r\n  handleChange = (e, { name, value }) => {\r\n    // this.setState({ [name]: value });\r\n    try {\r\n      var valStr = String(value);\r\n      if (this.is_validCap(valStr) === true) {\r\n        this.setState({\r\n          linkCaption: valStr,\r\n          linkCapErr: false\r\n        });\r\n\r\n      }\r\n      else {\r\n        // not valid caption\r\n        this.setState({\r\n          linkCaption: valStr,\r\n          linkCapErr: true\r\n        });\r\n      }\r\n    } catch (error) {\r\n      this.setState({\r\n        linkCaption: value,\r\n        linkCapErr: true\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  is_url = (str) => {\r\n    // taken from: https://www.w3resource.com/javascript-exercises/javascript-regexp-exercise-9.php\r\n    let regexp = /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\r\n    if (regexp.test(str)) {\r\n      return true;\r\n    }\r\n    else {\r\n      return false;\r\n    }\r\n\r\n  }\r\n\r\n  is_validCap = (str) => {\r\n    // taken from: https://www.w3resource.com/javascript-exercises/javascript-regexp-exercise-9.php\r\n    let startReg = /^\\s/;\r\n    let endReg = /\\s$/;\r\n    if (startReg.test(str) === true || endReg.test(str) === true || str.length === 0 || str.length > 64) {\r\n      return false;\r\n    }\r\n    else {\r\n      return true;\r\n    }\r\n\r\n  }\r\n\r\n  handleChangeUrl = (e, { name, value }) => {\r\n    try {\r\n      var valStr = String(value);\r\n      if (this.is_url(valStr) === true) {\r\n        this.setState({\r\n          linkUrl: valStr,\r\n          linkUrlErr: false\r\n        });\r\n\r\n      }\r\n      else {\r\n        // not valid url\r\n        this.setState({\r\n          linkUrl: valStr,\r\n          linkUrlErr: true\r\n        });\r\n      }\r\n    } catch (error) {\r\n      this.setState({\r\n        linkUrl: value,\r\n        linkUrlErr: true\r\n      });\r\n\r\n    }\r\n\r\n  }\r\n\r\n  onSubmit = async () => {\r\n    // event.preventDefault();\r\n\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      this.setState({ message: \"Pending\", loading: true });\r\n\r\n      await cheapGloat.methods.submitLink(this.state.submittedLinkUrl, this.state.submittedLinkCaption).send({\r\n        from: accounts[0]\r\n      });\r\n\r\n      this.setState({ message: \"Done\", loading: false });\r\n\r\n    }\r\n    catch (error) {\r\n      console.log(\"Error submitting. Err:\", error);\r\n      this.setState({ message: \"Error\", loading: false });\r\n\r\n    }\r\n\r\n\r\n\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    let userLayout;\r\n\r\n    // const { name, email, submittedName, submittedEmail } = this.state;\r\n    // const { linkUrl, linkCaption } = this.state;\r\n    // if \r\n\r\n    userLayout = (\r\n      <Segment\r\n        vertical\r\n      >\r\n        <Grid textAlign='center' style={{ height: '100vh' }}>\r\n          <Grid.Column style={{ maxWidth: 450 }}>\r\n            <Card centered fluid>\r\n              <Card.Content>\r\n                <Form loading={this.state.loading} onSubmit={this.handleSubmit}>\r\n                  <Form.Field error={this.state.linkUrlErr}>\r\n                    <label>Link Url</label>\r\n                    <TextArea\r\n                      name='linkUrl'\r\n                      value={this.state.linkUrl}\r\n                      onChange={this.handleChangeUrl}\r\n                      placeholder='Enter the plain text url'\r\n                    />\r\n                  </Form.Field>\r\n                  <Form.Field error={this.state.linkCapErr}>\r\n                    <label>Caption</label>\r\n                    <Form.Input\r\n                      name='linkCaption'\r\n                      value={this.state.linkCaption}\r\n                      onChange={this.handleChange}\r\n                      placeholder='Enter text caption (Max 64 characters)' />\r\n                  </Form.Field>\r\n                  <Button type='submit'>Submit</Button>\r\n                </Form>\r\n                <p>{this.state.message}</p>\r\n              </Card.Content>\r\n            </Card>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n    );\r\n\r\n\r\n    return (\r\n      <div>\r\n        {userLayout}\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default withRouter(SubmitView);\r\n\r\n","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Header,\r\n  Segment,\r\n  Item,\r\n  Label\r\n} from 'semantic-ui-react';\r\nimport web3 from '../web3';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport cheapGloat from '../cheapGloat';\r\n\r\nconst ZERO_ADDR = \"0x0000000000000000000000000000000000000000\";\r\n\r\nclass NewView extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  state = {\r\n    curMsg: \"\",\r\n    value: \"\",\r\n    message: \"\",\r\n    newSubs: [],\r\n    loading: false,\r\n    roundNum: null,\r\n    accountsAvailable: false,\r\n    accountList: [],\r\n    upvoteIsLoading: [],\r\n    downvoteIsLoading: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.initPageData();\r\n\r\n  }\r\n\r\n  initPageData = async () => {\r\n\r\n    let accounts;\r\n    let accAvailable = false;\r\n    if (web3 !== null && cheapGloat !== null) {\r\n      // console.log(web3.version);\r\n      // console.log(\"Got3\");\r\n      accounts = await web3.eth.getAccounts();\r\n      // console.log(accounts);\r\n      if (accounts.length > 0) {\r\n        accAvailable = true;\r\n      }\r\n      else {\r\n        accAvailable = false;\r\n      }\r\n    }\r\n    else {\r\n      accAvailable = false;\r\n    }\r\n\r\n    if (accAvailable === true) {\r\n      // user has web3 available\r\n      // fetch list of current submissions\r\n      const rnum = await cheapGloat.methods.currentRoundNum().call();\r\n      // console.log(rnum);\r\n\r\n      this.setState({\r\n        roundNum: rnum,\r\n        loading: true,\r\n        accountsAvailable: accAvailable,\r\n        accountList: accounts,\r\n      });\r\n\r\n      var subs = [];\r\n      var loadingUs = [];\r\n      var loadingDs = [];\r\n\r\n      for (var i = 0; i < 69; i++) {\r\n        const subI = await cheapGloat.methods.submissions(i).call();\r\n        subs.push(subI);\r\n        loadingUs.push(false);\r\n        loadingDs.push(false);\r\n\r\n      }\r\n\r\n\r\n      // console.log(message);\r\n      this.setState({\r\n        newSubs: subs,\r\n        loading: false,\r\n        upvoteIsLoading: loadingUs,\r\n        downvoteIsLoading: loadingDs\r\n      });\r\n\r\n\r\n    }\r\n    else {\r\n      // user does not have web3\r\n      // let them know\r\n      this.setState({\r\n        roundNum: null,\r\n        loading: false,\r\n        accountsAvailable: accAvailable,\r\n      });\r\n    }\r\n\r\n  };\r\n\r\n\r\n  updateSubVotesAtId = async (sId) => {\r\n    this.setState({\r\n      loading: true,\r\n    });\r\n    try {\r\n      // get the updated upvote/downvote count\r\n      const subI = await cheapGloat.methods.submissions(sId).call();\r\n      // now update the state newSub array at the position\r\n      var subList = this.state.newSubs;\r\n      subList[sId] = subI;\r\n      // subs.push(subI);\r\n      // console.log(result);\r\n      this.setState({\r\n        newSubs: subList,\r\n        loading: false,\r\n      });\r\n\r\n    } catch (error) {\r\n      console.log(\"Error, unable to update submission vote count. Err:\", error);\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n  handleClickUpvote = (data, event) => {\r\n    // console.log(\"Upvote clicked\");\r\n    // console.log(data);\r\n    const buttonClickId = event.value;\r\n    // console.log(buttonClickId);\r\n    console.log(\"Upvote clicked on subID:\", buttonClickId);\r\n    // now submit the users upvote to the network\r\n    this.submitUpvoteAsync(buttonClickId);\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  submitUpvoteAsync = async (sId) => {\r\n    // update the state of the clicked button\r\n    var upvotesLoading = this.state.upvoteIsLoading;\r\n    // change state of the button to loading\r\n    upvotesLoading[sId] = true;\r\n\r\n    this.setState({\r\n      loading: true,\r\n      upvoteIsLoading: upvotesLoading\r\n    });\r\n    try {\r\n      const result = await cheapGloat.methods.upvoteSubmissionById(sId).send({\r\n        from: this.state.accountList[0],\r\n        value: web3.utils.toWei(\"0.5\", \"ether\"),\r\n        gas: \"1000000\"\r\n      });\r\n      // console.log(result);\r\n\r\n      // Finally update this items vote count only\r\n      await this.updateSubVotesAtId(sId);\r\n      upvotesLoading[sId] = false;\r\n\r\n\r\n\r\n      this.setState({\r\n        loading: false,\r\n        upvoteIsLoading: upvotesLoading\r\n      });\r\n\r\n    } catch (error) {\r\n      console.log(\"Error, unable to upvote. Err:\", error);\r\n      upvotesLoading[sId] = false;\r\n      this.setState({\r\n        loading: false,\r\n        upvoteIsLoading: upvotesLoading\r\n      });\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  handleClickDownvote = (data, event) => {\r\n    // console.log(data);\r\n    const buttonClickId = event.value;\r\n    console.log(\"Downvote clicked on subID:\", buttonClickId);\r\n    this.submitDownvotevoteAsync(buttonClickId);\r\n    // Finally update this items vote count only\r\n    // this.updateSubVotesAtId(buttonClickId);\r\n\r\n\r\n  }\r\n\r\n\r\n  submitDownvotevoteAsync = async (sId) => {\r\n    // update the state of the clicked button\r\n    var downvotesLoading = this.state.downvoteIsLoading;\r\n    // change state of the button to loading\r\n    downvotesLoading[sId] = true;\r\n\r\n    this.setState({\r\n      loading: true,\r\n      downvoteIsLoading: downvotesLoading\r\n    });\r\n\r\n    try {\r\n      const result = await cheapGloat.methods.downvoteSubmissionById(sId).send({\r\n        from: this.state.accountList[0],\r\n        value: web3.utils.toWei(\"0.5\", \"ether\"),\r\n        gas: \"1000000\"\r\n      });\r\n      // console.log(result);\r\n\r\n      // Finally update this items vote count only\r\n      await this.updateSubVotesAtId(sId);\r\n      downvotesLoading[sId] = false;\r\n\r\n\r\n      this.setState({\r\n        loading: false,\r\n        downvoteIsLoading: downvotesLoading\r\n      });\r\n\r\n    } catch (error) {\r\n      console.log(\"Error, unable to downvote. Err:\", error);\r\n      downvotesLoading[sId] = false;\r\n      this.setState({\r\n        loading: false,\r\n        downvoteIsLoading: downvotesLoading\r\n      });\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    let userLayout;\r\n\r\n    let listItems = this.state.newSubs.map((row, index) => {\r\n      const truncate = (str, start, end) => {\r\n        // only if str len is > 42\r\n        if (str.length > start) {\r\n\r\n          let seperator = '...';\r\n          return str.substr(0, start) + seperator + str.substr(str.length - end);\r\n        }\r\n        else {\r\n          return str;\r\n        }\r\n      }\r\n\r\n      // check if this sub has data\r\n      // if not, return empty component with unclickable buttons\r\n      // console.log(row.subAddr);\r\n      // console.log(typeof row.subAddr);\r\n\r\n\r\n\r\n      if (row.subAddr == ZERO_ADDR) {\r\n        // use subAddr to tell if this post has been actually submitted\r\n\r\n        const upVoteLabelObj = { basic: true, content: row.upvoteCount };\r\n        const downVoteLabelObj = { basic: true, pointing: 'right', content: row.downvoteCount };\r\n        return (\r\n          <Item key={index}>\r\n\r\n            <Item.Content style={{ maxWidth: \"40px\", minWidth: \"40px\" }} >\r\n              <Item.Header>{index}.</Item.Header>\r\n            </Item.Content>\r\n\r\n            <Item.Content >\r\n\r\n              <Item.Header >\r\n                <div className=\"container\" >\r\n                  <span title=\"\">\r\n                  </span>\r\n                </div>\r\n\r\n              </Item.Header>\r\n              <Item.Description> <Label size=\"mini\">by {row.subAddr}</Label></Item.Description>\r\n              <Item.Extra>\r\n\r\n\r\n              </Item.Extra>\r\n            </Item.Content>\r\n\r\n            <Item.Content style={{ paddingLeft: \"10px\" }}>\r\n              <div style={{ float: \"right\" }}>\r\n                <Button\r\n                  disabled\r\n                  icon='arrow up'\r\n                  color=\"blue\"\r\n                  label={upVoteLabelObj}\r\n                  labelPosition='right'\r\n                />\r\n                <Button\r\n                  disabled\r\n                  icon='arrow down'\r\n                  color=\"black\"\r\n                  label={downVoteLabelObj}\r\n                  labelPosition='left'\r\n                />\r\n              </div>\r\n            </Item.Content>\r\n\r\n          </Item>\r\n        );\r\n\r\n      }\r\n      else {\r\n\r\n        const subUrlTruncated = truncate(row.subUrl, 42, 3);\r\n        // console.log(row);\r\n\r\n\r\n        // create the upvote/downvote label objects for this row\r\n        const upVoteLabelObj = { basic: true, content: row.upvoteCount, color: \"blue\" };\r\n        const downVoteLabelObj = { basic: true, pointing: 'right', content: row.downvoteCount, color: \"black\" };\r\n        return (\r\n          <Item key={index}>\r\n\r\n            <Item.Content style={{ maxWidth: \"40px\", minWidth: \"40px\" }} >\r\n              <Item.Header>{index}.</Item.Header>\r\n            </Item.Content>\r\n\r\n            <Item.Content >\r\n\r\n              <Item.Header href={row.subUrl} target='_blank'>\r\n                <div className=\"container\" >\r\n                  <span title={row.subUrl}>\r\n                    {subUrlTruncated}\r\n                  </span>\r\n                </div>\r\n\r\n              </Item.Header>\r\n              <Item.Description>{row.subCaption} <Label size=\"mini\">by {row.subAddr}</Label></Item.Description>\r\n              <Item.Extra>\r\n\r\n\r\n              </Item.Extra>\r\n            </Item.Content>\r\n\r\n            <Item.Content style={{ paddingLeft: \"10px\" }}>\r\n              <div style={{ float: \"right\" }}>\r\n                <Button\r\n                  loading={this.state.upvoteIsLoading[index]}\r\n                  onClick={this.handleClickUpvote}\r\n                  icon='arrow up'\r\n                  color=\"blue\"\r\n                  label={upVoteLabelObj}\r\n                  labelPosition='right'\r\n                  value={row.subId}\r\n                />\r\n                <Button\r\n                  loading={this.state.downvoteIsLoading[index]}\r\n                  onClick={this.handleClickDownvote}\r\n                  icon='arrow down'\r\n                  color=\"black\"\r\n                  label={downVoteLabelObj}\r\n                  labelPosition='left'\r\n                  value={row.subId}\r\n                />\r\n              </div>\r\n            </Item.Content>\r\n\r\n          </Item>\r\n        );\r\n      }\r\n\r\n    });\r\n\r\n\r\n    userLayout = (\r\n      <div>\r\n        <Segment\r\n          inverted\r\n          textAlign='center'\r\n          style={{ minHeight: 100, padding: '1em 0em' }}\r\n          vertical\r\n          loading={this.state.loading}\r\n        >\r\n          <Container text>\r\n            <Header\r\n              as='h1'\r\n              inverted\r\n              style={{\r\n                fontWeight: 'normal',\r\n                marginBottom: '1em',\r\n                marginTop: '1em',\r\n              }}\r\n            >\r\n              <Header.Content>\r\n                Round ({this.state.roundNum}) Submissions\r\n              </Header.Content>\r\n            </Header>\r\n\r\n          </Container>\r\n        </Segment>\r\n\r\n        <Segment\r\n          style={{ margin: '3em', padding: '1em 0em' }}\r\n          vertical\r\n          size=\"small\"\r\n        >\r\n          <Item.Group divided>\r\n            {listItems}\r\n          </Item.Group>\r\n        </Segment>\r\n      </div>\r\n    );\r\n\r\n\r\n    return (\r\n      <div>\r\n        {userLayout}\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default withRouter(NewView);\r\n\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\n\r\nimport HomeView from './containers/HomeView';\r\nimport GloatView from './containers/GloatView';\r\nimport AboutView from './containers/AboutView';\r\nimport SubmitView from './containers/SubmitView';\r\nimport NewView from './containers/NewView';\r\n\r\nconst BaseRouter = () => (\r\n    <div>\r\n        <Route exact path=\"/\" component={HomeView} />\r\n        <Route exact path=\"/gloat\" component={GloatView} />\r\n        <Route exact path=\"/about\" component={AboutView} />\r\n        <Route exact path=\"/submit\" component={SubmitView} />\r\n        <Route exact path=\"/new\" component={NewView} />\r\n\r\n    </div>\r\n);\r\n\r\nexport default BaseRouter;","import React, { Component } from 'react';\nimport './App.css';\nimport CustomLayout from './containers/Layout';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport BaseRouter from './routes';\n\nclass App extends Component {\n\n\n\n\n\n  render() {\n\n    return (\n      <div>\n        <Router basename=\"/cheapGLoaT\">\n          <CustomLayout {...this.props}>\n            <BaseRouter />\n          </CustomLayout>\n        </Router>\n      </div>\n    );\n  }\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}